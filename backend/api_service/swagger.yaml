openapi: 3.0.3
info:
  title: PingTower Microservices API
  description: |
    –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤
    
    ## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
    
    ### üåê API Service (8080) - Gateway
    –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å, —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    
    ### üîê Auth Service (8081) - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è  
    JWT —Ç–æ–∫–µ–Ω—ã, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    
    ### üì° Ping Service (8082) - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤
    
    ### üóÑÔ∏è DB Service (8083) - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ª–æ–≥–∞–º–∏
    
    ### üìß Notification Service (8084) - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kafka
    
    ## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ API Service (8080)
    2. –ü–æ–ª—É—á–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
    3. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
    5. –ü–æ–ª—É—á–∞–π—Ç–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–±–æ—è—Ö
    
  version: 1.0.0
  contact:
    name: PingTower Team
    
servers:
  - url: http://localhost:8080
    description: API Service - Main Gateway
  - url: http://localhost:8081  
    description: Auth Service - JWT Authentication
  - url: http://localhost:8082
    description: Ping Service - Site Monitoring
  - url: http://localhost:8083
    description: DB Service - Database Operations
  - url: http://localhost:8084
    description: Notification Service - Email Alerts

security:
  - bearerAuth: []

paths:
  # ==================== API SERVICE (8080) ====================
  /health:
    get:
      summary: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API Gateway
      tags: [API Service]
      servers:
        - url: http://localhost:8080
      security: []
      responses:
        '200':
          description: API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
                    
  /register:
    post:
      summary: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      tags: [API Service]
      servers:
        - url: http://localhost:8080
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '201':
          description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
      tags: [API Service]
      servers:
        - url: http://localhost:8080
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /checkers:
    get:
      summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      tags: [API Service]
      servers:
        - url: http://localhost:8080
      responses:
        '200':
          description: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PingLog'
        '401':
          description: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      summary: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–π—Ç–∞
      tags: [API Service]
      servers:
        - url: http://localhost:8080
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSiteRequest'
      responses:
        '201':
          description: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /checker/{id}:
    get:
      summary: –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞
      tags: [API Service]
      servers:
        - url: http://localhost:8080
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID —Å–∞–π—Ç–∞
          example: 1
      responses:
        '200':
          description: –õ–æ–≥–∏ —Å–∞–π—Ç–∞
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PingLog'
        '400':
          description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–∞–π—Ç–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pingAll:
    post:
      summary: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
      tags: [API Service]
      servers:
        - url: http://localhost:8080
      responses:
        '200':
          description: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingAllResponse'
        '401':
          description: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== AUTH SERVICE (8081) ====================
  /generate:
    post:
      summary: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–æ–≤
      tags: [Auth Service]
      servers:
        - url: http://localhost:8081
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: –¢–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /validate:
    post:
      summary: –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
      tags: [Auth Service]
      servers:
        - url: http://localhost:8081
      security: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ç–µ–ª—É –∑–∞–ø—Ä–æ—Å–∞)
      responses:
        '200':
          description: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'

  /refresh:
    post:
      summary: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
      tags: [Auth Service]
      servers:
        - url: http://localhost:8081
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: –ù–µ–≤–µ—Ä–Ω—ã–π refresh —Ç–æ–∫–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== PING SERVICE (8082) ====================
  /ping:
    post:
      summary: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
      tags: [Ping Service]
      servers:
        - url: http://localhost:8082
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingRequest'
      responses:
        '200':
          description: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        '400':
          description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== DB SERVICE (8083) ====================
  /user:
    post:
      summary: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      tags: [DB Service]
      servers:
        - url: http://localhost:8083
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    get:
      summary: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      tags: [DB Service]
      servers:
        - url: http://localhost:8083
      security: []
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
          example: "user@example.com"
      responses:
        '200':
          description: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Email –Ω–µ —É–∫–∞–∑–∞–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== NOTIFICATION SERVICE (8084) ====================

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ /login –∏–ª–∏ /generate"

  schemas:
    AuthRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
          description: "Email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        password:
          type: string
          minLength: 6
          example: "password123"
          description: "–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "JWT access —Ç–æ–∫–µ–Ω"
        refresh_token:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: "Refresh —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        id:
          type: integer
          example: 1
          description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        email:
          type: string
          format: email
          example: "user@example.com"
          description: "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"

    ValidateRequest:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"

    ValidateResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true
          description: "–í–∞–ª–∏–¥–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω"
        email:
          type: string
          format: email
          example: "user@example.com"
          description: "Email –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω)"

    RefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: "Refresh —Ç–æ–∫–µ–Ω"

    AddSiteRequest:
      type: object
      required: [site]
      properties:
        site:
          type: string
          format: uri
          example: "https://example.com"
          description: "URL —Å–∞–π—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        time:
          type: integer
          minimum: 60
          example: 300
          description: "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"

    PingRequest:
      type: object
      required: [site]
      properties:
        site:
          type: string
          example: "https://example.com"
          description: "URL —Å–∞–π—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"

    PingResponse:
      type: object
      properties:
        ping_time:
          type: string
          format: date-time
          example: "2025-09-21T10:30:00Z"
          description: "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        response_time:
          type: integer
          example: 250
          description: "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (-1 = –æ—à–∏–±–∫–∞)"
        error:
          type: string
          example: "connection timeout"
          description: "–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)"

    PingLog:
      type: object
      properties:
        id:
          type: integer
          example: 1
        req_time:
          type: string
          format: date-time
          example: "2025-09-21T10:30:00Z"
        resp_time:
          type: integer
          example: 250
          description: "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"
        status:
          type: string
          enum: [initial, success, failed]
          example: "success"
        site:
          type: string
          example: "https://example.com"

    CreateUserRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "password123"

    CreateUserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"

    PingAllResponse:
      type: object
      properties:
        message:
          type: string
          example: "Ping completed"
        successful:
          type: integer
          example: 5
          description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"
        failed:
          type: integer
          example: 1
          description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"
        total:
          type: integer
          example: 6
          description: "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫"

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Site and check added successfully"

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        service:
          type: string
          example: "notification_service"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request data"
        message:
          type: string
          example: "The provided email is already registered"

    NotificationKafka:
      type: object
      description: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka —Ç–æ–ø–∏–∫–µ notification-alerts"
      required: [email, site, time]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
          description: "Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        site:
          type: string
          example: "https://example.com"
          description: "URL –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å–∞–π—Ç–∞"
        time:
          type: string
          format: date-time
          example: "2025-09-21T10:30:00Z"
          description: "–í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"

tags:
  - name: API Service
    description: "üåê –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å (8080) - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
  - name: Auth Service
    description: "üîê –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (8081) - JWT —Ç–æ–∫–µ–Ω—ã"
  - name: Ping Service
    description: "üì° –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (8082) - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤"
  - name: DB Service
    description: "üóÑÔ∏è –°–µ—Ä–≤–∏—Å –ë–î (8083) - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏"
  - name: Notification Service
    description: "üìß –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (8084) - email —á–µ—Ä–µ–∑ Kafka"