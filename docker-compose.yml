version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "8090:8090"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    mem_limit: 256m
    cpus: "0.3"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: [app-network]

  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    mem_limit: 512m
    cpus: "0.5"
    depends_on: [zookeeper]
    ports: ["19092:19092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_HEAP_OPTS: "-Xmx256m -Xms128m"
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:29092,EXTERNAL://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
    healthcheck:
      # cub есть в образах Confluent; ждём готовности брокера
      test: ["CMD", "bash", "-lc", "cub kafka-ready -b localhost:29092 1 30"]
      interval: 5s
      timeout: 5s
      retries: 30
    networks: [app-network]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    mem_limit: 256m
    cpus: "0.3"
    ports: ["8085:8080"]
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka1:29092
    depends_on: [kafka1]
    networks: [app-network]

  postgres_db:
    image: postgres:15
    mem_limit: 256m
    cpus: "0.3"
    restart: always
    ports: ["5432:5432"]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ping_db
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ping_db"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks: [app-network]

  clickhouse_db:
    image: clickhouse/clickhouse-server:23.8
    mem_limit: 2g
    cpus: "0.5"
    restart: always
    ports:
      - "9000:9000"
      - "8123:8123"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD:            # пустой пароль
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_log:/var/log/clickhouse-server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks: [app-network]

  redis:
    image: redis:7-alpine
    mem_limit: 128m
    cpus: "0.2"
    ports: ["6379:6379"]
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [app-network]

  auth_service:
    build: ./backend/auth
    mem_limit: 256m
    cpus: "0.3"
    ports: ["8081:8081"]
    environment:
      - DB_URL=postgres_db:5432
      - DB_NAME=ping_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=hackathon_secret_key_2024
      - JWT_EXPIRY=24
    depends_on:
      - postgres_db
      - redis
    networks: [app-network]

  db_service:
    build: ./backend/db_service
    mem_limit: 256m
    cpus: "0.3"
    ports: ["8083:8083"]
    environment:
      - PSQL_HOST=postgres_db 
      - PSQL_PORT=5432
      - PSQL_USER=postgres
      - PSQL_PASSWORD=postgres
      - PSQL_DBNAME=ping_db
      - CLICKHOUSE_HOST=clickhouse_db
      - CLICKHOUSE_PORT=9000
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
      - CLICKHOUSE_DB=default
    depends_on:
      postgres_db:
        condition: service_healthy
      clickhouse_db:
        condition: service_healthy
    networks: [app-network]

  ping_service:
    build: ./backend/ping_service
    mem_limit: 256m
    cpus: "0.3"
    ports: ["8082:8082"]
    environment:
      - DB_SERVICE_URL=http://db_service:8083
      - KAFKA_BROKER=kafka1:29092
    depends_on:
      - db_service
      - kafka1
    networks: [app-network]

  api_service:
    build: ./backend/api_service
    mem_limit: 256m
    cpus: "0.3"
    ports: ["8080:8080"]
    environment:
      - DB_SERVICE_URL=http://db_service:8083
      - AUTH_SERVICE_URL=http://auth_service:8081
      - PING_SERVICE_URL=http://ping_service:8082
      - KAFKA_BROKER=kafka1:29092
    depends_on:
      - postgres_db
      - clickhouse_db
      - kafka1
      - db_service
      - auth_service
      - ping_service
    networks: [app-network]

  notification_service:
    build: ./backend/notification_service
    mem_limit: 256m
    cpus: "0.3"
    ports: ["8084:8084"]
    environment:
      MAILERSEND_API_KEY: mlsn.56553fafd04e982332a4ef9003ef6fc0345de9fcea0473122e482322f2b83938
      FROM_EMAIL: MS_QpmOx6@test-65qngkd5o8jlwr12.mlsender.net
      FROM_NAME: PingTower Alert System
      SMTP_HOST: smtp.mailersend.net
      SMTP_PORT: 587
      SMTP_USERNAME: MS_QpmOx6@test-65qngkd5o8jlwr12.mlsender.net
      SMTP_PASSWORD: mssp.yv5Oq0G.z3m5jgrpd804dpyo.wmAD9Od
      KAFKA_BROKERS: kafka1:29092
      KAFKA_TOPIC: notification-alerts
      KAFKA_CONSUMER_GROUP: notification-service
      HEALTH_PORT: 8084
    depends_on:
      kafka1:
        condition: service_healthy
    restart: unless-stopped
    networks: [app-network]


volumes:
  postgres_data:
  clickhouse_data:
  clickhouse_log:

networks:
  app-network:
    driver: bridge
